version: 2.1
orbs:
  win: circleci/windows@5.0

executors:
  lint:
    docker:
      - image: ethereum/cpp-build-env:20-lint
    resource_class: small
    environment:
      CMAKE_BUILD_PARALLEL_LEVEL: 2
  linux-gcc-latest:
    docker:
      - image: ethereum/cpp-build-env:20-gcc-13
    environment:
      CMAKE_BUILD_PARALLEL_LEVEL: 4
  linux-gcc-multilib:
    docker:
      - image: ethereum/cpp-build-env:20-gcc-13-multilib
    resource_class: small
    environment:
      CMAKE_BUILD_PARALLEL_LEVEL: 2
  blockchain-tests:
    docker:
      - image: ethereum/cpp-build-env:20-gcc-13
    resource_class: xlarge
    environment:
      CMAKE_BUILD_PARALLEL_LEVEL: 8
  linux-clang-xlarge:
    docker:
      - image: ethereum/cpp-build-env:20-clang-16
    resource_class: xlarge
    environment:
      CMAKE_BUILD_PARALLEL_LEVEL: 8
  linux-gcc-min:
    docker:
      - image: ethereum/cpp-build-env:17-gcc-11
    resource_class: small
    environment:
      CMAKE_BUILD_PARALLEL_LEVEL: 2
  linux-clang-latest:
    docker:
      - image: ethereum/cpp-build-env:20-clang-16
    environment:
      CMAKE_BUILD_PARALLEL_LEVEL: 4
  linux-clang-min:
    docker:
      - image: ethereum/cpp-build-env:18-clang-13
    resource_class: small
    environment:
      CMAKE_BUILD_PARALLEL_LEVEL: 2
  linux-base:
    docker:
      - image: cimg/base:edge-22.04
    resource_class: small
    environment:
      CMAKE_BUILD_PARALLEL_LEVEL: 2
  macos:
    resource_class: macos.x86.medium.gen2
    macos:
      xcode: 15.0.0
    environment:
      CMAKE_BUILD_PARALLEL_LEVEL: 4
  macos-m1:
    resource_class: macos.m1.large.gen1
    macos:
      xcode: 15.0.0
    environment:
      CMAKE_BUILD_PARALLEL_LEVEL: 8
  macos-xcode-min:
    resource_class: macos.x86.medium.gen2
    macos:
      xcode: 14.3.1
    environment:
      CMAKE_BUILD_PARALLEL_LEVEL: 4

commands:
  install_cmake:
    parameters:
      version:
        type: string
    steps:
      - run:
          name: "Install CMake <<parameters.version>>"
          working_directory: /usr/local
          command: |
            curl -L https://github.com/Kitware/CMake/releases/download/v<<parameters.version>>/cmake-<<parameters.version>>-linux-x86_64.tar.gz | sudo tar -xz --strip=1

  install_riscv_toolchain:
    steps:
      - run:
          name: "Install RISC-V Toolchain"
          working_directory: /usr/local
          command: |
            curl -L https://github.com/riscv-collab/riscv-gnu-toolchain/releases/download/2023.07.07/riscv32-glibc-ubuntu-22.04-llvm-nightly-2023.07.07-nightly.tar.gz | sudo tar -xz

  checkout_submodules:
    steps:
      - run:
          name: "Update submodules"
          command: git submodule update --init --recursive

  build_silkworm:
    parameters:
      branch:
        type: string
        default: master
      commit:
        type: string
    steps:
      - run:
          # Fixes the cache restore step in case the silkworm dir does not exist
          name: "Make Silkworm dir"
          command: mkdir -p ~/silkworm
      - restore_cache:
          name: "Restore Silkworm cache (<<parameters.branch>>-<<parameters.commit>>)"
          key: &silkworm-cache-key silkworm-v2-<<parameters.branch>>-<<parameters.commit>>
      - run:
          name: "Check Silkworm cache"
          command: |
            if [ -f ~/silkworm/ethereum ]; then
              echo 'Cached Silkworm binary available - skip build.'
            else
              echo 'export SILKWORM_BUILD=true' >> $BASH_ENV
            fi
      - run:
          name: "Checkout Silkworm"
          working_directory: ~/silkworm/src
          command: |
            [ "$SILKWORM_BUILD" = true ] || exit 0
            git clone --no-checkout --single-branch https://github.com/torquem-ch/silkworm.git . --branch <<parameters.branch>>
            git checkout <<parameters.commit>>
            git submodule update --init --recursive --progress
      - run:
          name: "Install conan"
          command: sudo pip install --break-system-packages conan==1.58
      - run:
          name: "Configure Silkworm"
          working_directory: ~/silkworm
          command: |
            [ "$SILKWORM_BUILD" = true ] || exit 0
            cmake -S src -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=$(pwd)
      - run:
          name: "Build Silkworm cmd/test/ethereum"
          working_directory: ~/silkworm
          command: |
            [ "$SILKWORM_BUILD" = true ] || exit 0
            cmake --build build --target ethereum
      - save_cache:
          name: "Save Silkworm cache"
          key: *silkworm-cache-key
          paths:
            - ~/silkworm/ethereum

  download_execution_tests:
    parameters:
      repo:
        type: string
        default: "ethereum/tests"
      rev:
        type: string
        default: develop
      commit:
        type: string
        default: ""
      legacy:
        description: "Download also legacy tests"
        type: boolean
        default: true
    steps:
      - run:
          name: "Download execution tests: <<parameters.rev>> <<parameters.commit>>"
          working_directory: ~/tests
          command: |
            find . -delete
            git clone --no-checkout --depth=100 --single-branch https://github.com/<<parameters.repo>> . --branch <<parameters.rev>>
            <<#parameters.rev>>git checkout <<parameters.rev>><</parameters.rev>>
            <<#parameters.commit>>git checkout <<parameters.commit>><</parameters.commit>>
      - when:
          condition: <<parameters.legacy>>
          steps:
            - run:
                name: "Download legacy execution tests (git submodule)"
                working_directory: ~/tests
                command: git submodule update --init --recursive --depth=1 --progress

  build:
    description: "Build"
    steps:
      - checkout
      - checkout_submodules
      - run:
          name: "Environment"
          command: |
            CC=${CC:-cc}
            CXX=${CXX:-cpp}
            echo CC: $CC
            echo CXX: $CXX
            $CC --version
            $CXX --version
            cmake --version
            echo CMAKE_BUILD_PARALLEL_LEVEL: $CMAKE_BUILD_PARALLEL_LEVEL

            # Create the build.info file for cache key.
            echo $TOOLCHAIN >> build.info
            echo $CMAKE_OPTIONS >> build.info
            $CXX --version >> build.info
            
            printf '\n-----------\nbuild.info:\n'
            cat build.info
      - restore_cache:
          name: "Restore Hunter cache"
          key: &hunter-cache-key hunter-{{arch}}-{{checksum "build.info"}}-{{checksum "cmake/Hunter/init.cmake"}}-{{checksum "cmake/Hunter/config.cmake"}}
      - run:
          name: "Configure"
          working_directory: ~/build
          command: |
            if [ "$TOOLCHAIN" ]; then
              export toolchain_option="-DTOOLCHAIN=$TOOLCHAIN"
            fi
            cmake ../project $toolchain_option -DCMAKE_INSTALL_PREFIX=~/install -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DEVMONE_TESTING=ON $CMAKE_OPTIONS
      - save_cache:
          name: "Save Hunter cache"
          key: *hunter-cache-key
          paths:
            - ~/.hunter/_Base/Cache
      - run:
          name: "Build"
          command: cmake --build ~/build
      - run:
          name: "Install"
          command: cmake --build ~/build --target install

  test:
    description: "Test"
    steps:
      - run:
          name: "Test"
          shell: bash
          working_directory: ~/build
          command: ctest -R ${TESTS_FILTER:-'.*'} --schedule-random --output-on-failure --parallel $CMAKE_BUILD_PARALLEL_LEVEL --output-junit ~/test_results/evmone.xml
      - store_test_results:
          path: ~/test_results

  collect_coverage_gcc:
    description: "Collect coverage data (GCC)"
    steps:
      - run:
          name: "Collect coverage data (GCC)"
          working_directory: ~/build
          command: |
            lcov --capture --directory . --output-file coverage.lcov --exclude='/usr/*' --exclude="$HOME/.hunter/*" --exclude="$PWD/_deps/*"
            lcov --zerocounters --directory .
            rm -rf ~/coverage
            genhtml coverage.lcov --output-directory ~/coverage --title $CIRCLE_PROJECT_REPONAME
      - store_artifacts:
          path: ~/coverage
          destination: coverage

  upload_coverage:
    description: "Upload coverage data"
    parameters:
      flags:
        type: string
    steps:
      - run:
          name: "Install codecov"
          command: |
            export CODECOV_VERSION=v0.5.0
            curl -Os https://uploader.codecov.io/$CODECOV_VERSION/linux/codecov
            curl -Os https://uploader.codecov.io/$CODECOV_VERSION/linux/codecov.SHA256SUM
            curl -Os https://uploader.codecov.io/$CODECOV_VERSION/linux/codecov.SHA256SUM.sig
            
            gpgv codecov.SHA256SUM.sig codecov.SHA256SUM
            shasum -c codecov.SHA256SUM
            
            chmod +x codecov
            sudo mv codecov /usr/local/bin

      - run:
          name: "Upload to Codecov"
          command: |
            # Convert to relative paths
            sed -i 's|$(pwd)/||' ~/build/coverage.lcov
            codecov --flags <<parameters.flags>> --required --file ~/build/coverage.lcov -X gcov

  package:
    description: "Make package"
    steps:
      - run:
          name: "Build Package"
          shell: bash
          working_directory: ~/package
          command: cmake --build ~/build --target package && mv ~/build/evmone-*.* .
      - store_artifacts:
          path: ~/package
          destination: package
      - persist_to_workspace:
          root: ~/package
          paths:
            - evmone-*

  unpack_package:
    steps:
      - attach_workspace:
          at: ~/package
      - run:
          name: "Unpack evmone"
          working_directory: ~/package
          command: tar xz < evmone*.tar.gz

jobs:

  lint:
    executor: lint
    steps:
      - checkout
      - run:
          name: "Check code format"
          command: |
            clang-format --version
            find include lib test -name '*.hpp' -o -name '*.cpp' -o -name '*.h' -o -name '*.c' | xargs clang-format -i
            git diff --color --exit-code
      - run:
          name: "Check spelling"
          command: |
            codespell --quiet-level=4 --skip=.git

  release-linux:
    executor: linux-gcc-latest
    environment:
      BUILD_TYPE: Release
    steps:
      - build
      - test
      - package

  release-windows:
    executor: win/server-2022
    environment:
      CMAKE_BUILD_TYPE: Release
      CMAKE_BUILD_PARALLEL_LEVEL: 4
    steps:
      - checkout
      - checkout_submodules
      - run:
          name: "Setup environment (bash)"
          shell: bash
          command: |
            echo 'export PATH=$PATH:"/c/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin"' >> $BASH_ENV
      - run:
          name: 'Configure'
          shell: powershell
          command: |
            $ErrorActionPreference = "Stop"
            & 'C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\Tools\Launch-VsDevShell.ps1' -Arch amd64
            which cmake
            cmake -S . -B ~/build -G Ninja -DCMAKE_INSTALL_PREFIX=C:\install -DEVMONE_TESTING=ON
      - run:
          name: 'Build'
          shell: powershell
          command: |
            $ErrorActionPreference = "Stop"
            & 'C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\Tools\Launch-VsDevShell.ps1' -Arch amd64
            cmake --build ~/build
      - test
      - package

  release-windows-32bit:
    executor: win/server-2022
    environment:
      CMAKE_BUILD_TYPE: Release
      CMAKE_BUILD_PARALLEL_LEVEL: 4
    steps:
      - checkout
      - checkout_submodules
      - run:
          name: "Setup environment (bash)"
          shell: bash
          command: |
            echo 'export PATH=$PATH:"/c/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin"' >> $BASH_ENV
      - run:
          name: 'Configure'
          shell: powershell
          command: |
            $ErrorActionPreference = "Stop"
            & 'C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\Tools\Launch-VsDevShell.ps1' -Arch x86
            which cmake
            cmake -S . -B ~/build -G Ninja -DCMAKE_INSTALL_PREFIX=C:\install -DEVMONE_TESTING=ON
      - run:
          name: 'Build'
          shell: powershell
          command: |
            $ErrorActionPreference = "Stop"
            & 'C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\Tools\Launch-VsDevShell.ps1' -Arch x86
            cmake --build ~/build
      - test
      - package

  release-macos:
    executor: macos
    environment:
      BUILD_TYPE: Release
    steps:
      - run:
          name: "Install System Dependencies"
          command: HOMEBREW_NO_AUTO_UPDATE=1 brew install cmake
      - build
      - test
      - package

  release-macos-m1:
    executor: macos-m1
    environment:
      BUILD_TYPE: Release
    steps:
      - run:
          name: "Install System Dependencies"
          command: HOMEBREW_NO_AUTO_UPDATE=1 brew install cmake
      - build
      - test
      - package

  deploy:
    docker:
      - image: circleci/golang
    steps:
      - run:
          name: "Install GHR"
          command: |
            GO111MODULE=on go get github.com/tcnksm/ghr@v0.12.1
      - attach_workspace:
          at: ~/package
      - run:
          name: "Create GitHub release"
          command: |
            ls -l ~/package
            prerelease_flag=$([[ $CIRCLE_TAG =~ ^v[0-9\.]+$ ]] || echo '-prerelease')
            name="$CIRCLE_PROJECT_REPONAME ${CIRCLE_TAG:1}"
            echo $name
            ghr -u $CIRCLE_PROJECT_USERNAME -r $CIRCLE_PROJECT_REPONAME -n "$name" $prerelease_flag $CIRCLE_TAG ~/package

  blockchain-tests:
    executor: blockchain-tests
    environment:
      BUILD_TYPE: Coverage
      CMAKE_OPTIONS: -DEVMONE_TESTING=OFF -DCMAKE_CXX_FLAGS=-Og
    steps:
      - build
      - build_silkworm:
          branch: evmc-v11.0.0-alpha.1
          commit: evmc-v11.0.0-alpha.1
      - download_execution_tests:
          rev: v12.4
      - run:
          name: "Silkworm-driven blockchain tests (Advanced)"
          working_directory: ~/build
          no_output_timeout: 20m
          command: ~/silkworm/ethereum --evm lib/libevmone.so,advanced --tests ~/tests --threads $CMAKE_BUILD_PARALLEL_LEVEL
      - run:
          name: "Silkworm-driven blockchain tests (Baseline)"
          working_directory: ~/build
          no_output_timeout: 20m
          command: ~/silkworm/ethereum --evm lib/libevmone.so --tests ~/tests --threads $CMAKE_BUILD_PARALLEL_LEVEL
      - collect_coverage_gcc
      - upload_coverage:
          flags: blockchaintests

  state-tests:
    executor: blockchain-tests
    environment:
      BUILD_TYPE: Coverage
      CMAKE_OPTIONS: -DCMAKE_CXX_FLAGS=-Og
    steps:
      - build
      - download_execution_tests:
          rev: v12.4
      - run:
          name: "State tests"
          working_directory: ~/build
          command: >
            EVMONE_PRECOMPILES_STUB=~/project/test/state/precompiles_stub.json 
            bin/evmone-statetest 
            ~/tests/GeneralStateTests 
            ~/tests/LegacyTests/Constantinople/GeneralStateTests
            ~/tests/EIPTests/StateTests/stEIP1153-transientStorage
      - run:
          name: "Blockchain tests (Pyspecs)"
          working_directory: ~/build
          command: >
            EVMONE_PRECOMPILES_STUB=~/project/test/state/precompiles_stub.json 
            bin/evmone-blockchaintest
            ~/tests/BlockchainTests/Pyspecs
      - run:
          name: "Blockchain tests (GeneralStateTests)"
          working_directory: ~/build
          command: >
            EVMONE_PRECOMPILES_STUB=~/project/test/state/precompiles_stub.json 
            bin/evmone-blockchaintest
            --gtest_filter='*:-VMTests/vmPerformance.*:*.*Call50000_sha256'
            ~/tests/BlockchainTests/GeneralStateTests
      - run:
          name: "Blockchain tests (ValidBlocks)"
          working_directory: ~/build
          command: >
            EVMONE_PRECOMPILES_STUB=~/project/test/state/precompiles_stub.json 
            bin/evmone-blockchaintest
            --gtest_filter='*:-bcMultiChainTest.*:bcTotalDifficultyTest.*:bcForkStressTest.ForkStressTest:bcGasPricerTest.RPC_API_Test:bcValidBlockTest.SimpleTx3LowS'
            ~/tests/BlockchainTests/ValidBlocks
      - run:
          name: "Blockchain tests (EIPs)"
          working_directory: ~/build
          command: >
            EVMONE_PRECOMPILES_STUB=~/project/test/state/precompiles_stub.json 
            bin/evmone-blockchaintest
            --gtest_filter='-*StateTests/stEOF/*.*'
            ~/tests/EIPTests/BlockchainTests/
      - download_execution_tests:
          repo: ipsilon/tests
          rev: eof-update-20230828
          legacy: false
      - run:
          name: "State tests (EOF)"
          working_directory: ~/build
          command: |
            bin/evmone-statetest ~/tests/EIPTests/StateTests/stEOF
      - run:
          name: "EOF validation tests"
          working_directory: ~/build
          command: |
            bin/evmone-eoftest ~/tests/EOFTests
      - collect_coverage_gcc
      - upload_coverage:
          flags: statetests

  precompiles-silkpre:
    executor: blockchain-tests
    environment:
      BUILD_TYPE: Coverage
      CMAKE_OPTIONS: -DCMAKE_CXX_FLAGS=-Og -DEVMONE_PRECOMPILES_SILKPRE=1
    steps:
      - run:
          name: "Install GMP"
          command: sudo apt-get -q update && sudo apt-get -qy install libgmp-dev
      - build
      - download_execution_tests:
          rev: v12.4
      - run:
          name: "State tests"
          working_directory: ~/build
          command: |
            bin/evmone-statetest ~/tests/GeneralStateTests ~/tests/LegacyTests/Constantinople/GeneralStateTests
      - collect_coverage_gcc
      - upload_coverage:
          flags: statetests-silkpre

  gcc-min:
    executor: linux-gcc-min
    steps:
      - build
      - test

  clang-min:
    executor: linux-clang-min
    steps:
      - build
      - test


  gcc-latest-coverage:
    executor: linux-gcc-latest
    environment:
      BUILD_TYPE: Coverage
      TESTS_FILTER: unittests|integration
    steps:
      - build
      - test
      - collect_coverage_gcc
      - upload_coverage:
          flags: unittests

  gcc-latest-memcheck:
    executor: linux-gcc-latest
    environment:
      BUILD_TYPE: Debug
      CMAKE_OPTIONS: -DCMAKE_CXX_FLAGS=-O1
    steps:
      - build
      - test
      - run:
          name: "memcheck"
          working_directory: ~/build
          command: valgrind --vgdb=no --error-exitcode=99 bin/evmone-unittests

  gcc-32bit:
    executor: linux-gcc-multilib
    environment:
      TOOLCHAIN: cxx17-32bit
    steps:
      - build
      - test

  clang-latest-sanitizers:
    executor: linux-clang-xlarge
    environment:
      CMAKE_OPTIONS: -DBUILD_SHARED_LIBS=NO -DSANITIZE=address,undefined,shift-exponent,implicit-conversion,nullability -DCMAKE_CXX_CLANG_TIDY=clang-tidy
      UBSAN_OPTIONS: halt_on_error=1
    steps:
      - build
      - test

  clang-latest-coverage:
    executor: linux-clang-latest
    resource_class: small
    environment:
      CMAKE_BUILD_PARALLEL_LEVEL: 2
      BUILD_TYPE: Coverage
      TESTS_FILTER: unittests|integration
    steps:
      - build
      - test
      - run:
          name: "Coverage report"
          working_directory: ~/build
          command: |
            ARGS='lib/libevmone.so -Xdemangler llvm-cxxfilt -instr-profile=evmone.profdata -ignore-filename-regex=include/evmc'
            SHOW_ARGS='-format=html -show-branches=count -show-regions -show-expansions'
            
            mkdir ~/coverage
            llvm-profdata merge *.profraw -o evmone.profdata
            llvm-cov show $ARGS $SHOW_ARGS > ~/coverage/full.html
            llvm-cov show $ARGS $SHOW_ARGS -region-coverage-lt=100 > ~/coverage/missing.html

            llvm-cov report $ARGS > ~/coverage/report.txt
            llvm-cov report $ARGS -use-color
      - store_artifacts:
          path: ~/coverage
          destination: coverage

  fuzzing:
    executor: linux-clang-xlarge
    environment:
      CMAKE_OPTIONS: -DEVMONE_FUZZING=ON
    steps:
      - build
      - restore_cache:
          name: "Restore fuzzing corpus"
          key: fuzzing-corpus
      - run:
          name: "Run evmone-fuzzer"
          working_directory: ~/build
          command: |
            bin/evmone-fuzzer -runs=5000000 -fork=$CMAKE_BUILD_PARALLEL_LEVEL -fork_corpus_groups=1 ~/corpus -create_missing_dirs=1 -max_len=100 -entropic_scale_per_exec_time=1 2>&1 | sed '/NEW_FUNC/d'
      - save_cache:
          name: "Save fuzzing corpus"
          key: fuzzing-corpus-{{epoch}}
          paths:
            - ~/corpus

  macos-asan:
    executor: macos-m1
    environment:
      BUILD_TYPE: RelWithDebInfo
      CMAKE_OPTIONS: -DSANITIZE=address,undefined
      TESTS_FILTER: unittests
    steps:
      - run:
          name: "Install System Dependencies"
          command: HOMEBREW_NO_AUTO_UPDATE=1 brew install cmake
      - build
      - test

  xcode-min:
    executor: macos-xcode-min
    steps:
      - run:
          name: "Install System Dependencies"
          command: HOMEBREW_NO_AUTO_UPDATE=1 brew install cmake
      - build
      - test

  cmake-min:
    executor: linux-base
    steps:
      - install_cmake:
          version: 3.16.9
      - build
      - test

  x86-64-v1:
    executor: linux-gcc-latest
    environment:
      BUILD_TYPE: Release
      QEMU_CPU: core2duo  # The lowest 64-bit CPU I could find, but qemu64 should be good too.
    steps:
      - build
      - run:
          name: "Check evmone.so"
          working_directory: ~/build
          command: (! qemu-x86_64-static bin/evmc run --vm ./lib/libevmone.so,trace 6000 2>&1) | grep "CPU does not support"
      - run:
          name: "Check unittests"
          working_directory: ~/build
          command: (! qemu-x86_64-static bin/evmone-unittests 2>&1) | grep "CPU does not support"

  riscv32:
    executor: linux-gcc-latest
    environment:
      BUILD_TYPE: Release
      CMAKE_OPTIONS: -DCMAKE_TOOLCHAIN_FILE=~/project/cmake/toolchains/riscv32.cmake
    steps:
      - install_riscv_toolchain
      - build
      - test



workflows:
  version: 2
  evmone:
    jobs:
      - lint
      - release-linux:
          filters:
            tags:
              only: /.*/
      - release-windows:
          filters:
            tags:
              only: /.*/
      - release-windows-32bit
      - release-macos:
          filters:
            tags:
              only: /.*/
      - release-macos-m1
      - deploy:
          requires:
            - release-linux
            - release-windows
            - release-macos
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9].*/
      - state-tests
      - precompiles-silkpre
      - blockchain-tests
      - cmake-min
      - gcc-min
      - clang-min
      - gcc-latest-coverage
      - gcc-latest-memcheck
      - clang-latest-sanitizers
      - clang-latest-coverage
      - macos-asan
      - xcode-min
      - gcc-32bit
      - x86-64-v1
      - riscv32
      - fuzzing
